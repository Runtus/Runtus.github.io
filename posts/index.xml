<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Runtus</title>
    <link>https://runtus.top/posts/</link>
    <description>Recent content in Posts on Runtus</description>
    <image>
      <title>Runtus</title>
      <url>https://lao-lan-go.oss-cn-beijing.aliyuncs.com/highQua/pixiv34.JPG</url>
      <link>https://lao-lan-go.oss-cn-beijing.aliyuncs.com/highQua/pixiv34.JPG</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 09 Sep 2023 10:34:09 +0800</lastBuildDate><atom:link href="https://runtus.top/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Node Packages</title>
      <link>https://runtus.top/posts/node-packages/</link>
      <pubDate>Sat, 09 Sep 2023 10:34:09 +0800</pubDate>
      
      <guid>https://runtus.top/posts/node-packages/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;之前一直被nodejs的模块执行规则所困扰，这种困扰来自于目前&lt;code&gt;Commonjs&lt;/code&gt;和&lt;code&gt;ESModule&lt;/code&gt;在Node端能够并存的情况，什么时候能够执行&lt;code&gt;ESModule&lt;/code&gt;，什么时候不能执行；在引用第三方包&lt;code&gt;node_modules&lt;/code&gt;，具体的包是根据什么来区分是&lt;code&gt;ESModule&lt;/code&gt;还是&lt;code&gt;Commonjs&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通过阅读了Nodejs的原文档，这些问题也随之迎刃而解，所以特此在本篇做一做记录。&lt;/p&gt;
&lt;p&gt;注：以下内容都是基于&lt;strong&gt;Nodejs V20.5.0&lt;/strong&gt; 进行编写。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;nodejs中的模块系统&#34;&gt;Nodejs中的模块系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;Node&lt;/code&gt;环境下，如今共存着两种模块规范：&lt;code&gt;ESModule&lt;/code&gt;和&lt;code&gt;Commonjs&lt;/code&gt;，前者是ES6中提出模块化规范，所以为了统一整个Javascript的模块化规范，Nodejs也逐渐的由之前主流的&lt;code&gt;Commonjs&lt;/code&gt;规范转变为&lt;code&gt;ESModule&lt;/code&gt;，只不过为了兼容&lt;code&gt;Nodejs&lt;/code&gt;老版本的代码，所以现在这两种模块在Node中是并存的关系，但是前者(&lt;code&gt;ESModule&lt;/code&gt;)是趋势。&lt;/li&gt;
&lt;li&gt;关于&lt;code&gt;Commonjs&lt;/code&gt;和&lt;code&gt;ESMoudle&lt;/code&gt;的模块技术细节，例如语法区别，加载规则等在本篇不会提到，接下来将会它们在&lt;code&gt;nodejs&lt;/code&gt;中的设置以及引用规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模块的执行与加载&#34;&gt;模块的执行与加载&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Node在执行代码前会先去判断代码是&lt;code&gt;ES&lt;/code&gt;模块还是&lt;code&gt;commonjs&lt;/code&gt;模块，Node会从三个角度依次判断代码的模块归属。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;es模块&#34;&gt;ES模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对于ES模块，当出现以下情况时，Nodejs会将文件视为ES模块。
&lt;ol&gt;
&lt;li&gt;扩展名为&lt;code&gt;.mjs&lt;/code&gt;的文件。&lt;/li&gt;
&lt;li&gt;项目所归属的&lt;code&gt;package.json&lt;/code&gt;的&lt;code&gt;type&lt;/code&gt;字段的值为&lt;code&gt;module&lt;/code&gt;，此时文件扩展名为&lt;code&gt;.js&lt;/code&gt;的文件都视为&lt;code&gt;ES&lt;/code&gt;模块。&lt;/li&gt;
&lt;li&gt;字符串作为参数传入 &lt;code&gt;--eval&lt;/code&gt;，或通过 &lt;code&gt;STDIN&lt;/code&gt; 管道传输到 &lt;code&gt;node&lt;/code&gt;，带有标志 &lt;code&gt;--input-type=module&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.mjs&lt;/code&gt;扩展名的文件被视为&lt;code&gt;ES&lt;/code&gt;模块的优先级是最高的，无论它身处何方，只要&lt;code&gt;Node&lt;/code&gt;发现其是&lt;code&gt;.mjs&lt;/code&gt;的文件，就会将其视作&lt;code&gt;ES&lt;/code&gt;模块来执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;commonjs模块&#34;&gt;commonjs模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;对于commonjs模块，当出现以下情况时，Nodejs会将文件视为&lt;code&gt;commonjs&lt;/code&gt;模块。
&lt;ol&gt;
&lt;li&gt;扩展名为&lt;code&gt;.cjs&lt;/code&gt;的文件。&lt;/li&gt;
&lt;li&gt;项目所属的&lt;code&gt;package.json&lt;/code&gt;的type字段的值为&lt;code&gt;commonjs&lt;/code&gt;时，此时文件扩展名为&lt;code&gt;.js&lt;/code&gt;的文件都视为&lt;code&gt;commonjs&lt;/code&gt;模块。&lt;/li&gt;
&lt;li&gt;字符串作为参数传入 &lt;code&gt;--eval&lt;/code&gt; 或 &lt;code&gt;--print&lt;/code&gt;，或通过 &lt;code&gt;STDIN&lt;/code&gt; 管道传输到 &lt;code&gt;node&lt;/code&gt;，带有标志 &lt;code&gt;--input-type=commonjs&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;和&lt;code&gt;ES&lt;/code&gt;模块类似，如果文件扩展名为&lt;code&gt;.cjs&lt;/code&gt;，那么Nodejs都会将其视作&lt;code&gt;commonjs&lt;/code&gt;模块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果不设置type字段，那么该项目将会默认为&lt;code&gt;commonjs&lt;/code&gt;语法的项目&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模块加载器&#34;&gt;模块加载器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nodejs有两种加载器用于分别解析说明符和加载&lt;code&gt;ES&lt;/code&gt;模块和&lt;code&gt;commonjs&lt;/code&gt;模块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;commonjs&lt;/code&gt;模块加载器:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;🌟 处理&lt;code&gt;require()&lt;/code&gt;调用，并且是同步加载模块的，&lt;/li&gt;
&lt;li&gt;🌟 支持&lt;strong&gt;以文件夹作为模块&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;🌟 不能用于加载`ECMAScript模块（ESModule）。&lt;/li&gt;
&lt;li&gt;🌟 解析路径时，如果未找到&lt;strong&gt;完全匹配项&lt;/strong&gt;，那么将尝试添加扩展名**&lt;code&gt;.js&lt;/code&gt;,&lt;code&gt;.json&lt;/code&gt;,&lt;code&gt;.node&lt;/code&gt;&lt;strong&gt;，然后最后再尝试解析&lt;/strong&gt;文件夹作为模块**。&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;.json&lt;/code&gt;文件视为JSON文本文件，可以直接使用&lt;code&gt;require&lt;/code&gt;加载。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;特别注意上述的四个带🌟的规则，在平时日常开发中应该是能够经常遇见的。&lt;strong&gt;从第4点也能知道为什么使用&lt;code&gt;require&lt;/code&gt;引用包时，可以不带文件的扩展名，因为node在解析路径时会自动添加&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ECMAScript&lt;/code&gt;模块加载器&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迭代器and生成器</title>
      <link>https://runtus.top/posts/%E8%BF%AD%E4%BB%A3%E5%99%A8and%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Wed, 23 Aug 2023 10:12:13 +0800</pubDate>
      
      <guid>https://runtus.top/posts/%E8%BF%AD%E4%BB%A3%E5%99%A8and%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;很多的数据结构都具备迭代的性质，但是不同的数据结构的迭代方法有所不同，往往需要知道具体的数据结构来选择对应的迭代方法，例如数组的迭代可以通过索引来进行迭代。&lt;/p&gt;
&lt;p&gt;为了统一迭代接口，使得我们&lt;strong&gt;可以不了解具体的数据结构的前提下&lt;/strong&gt;也能进行迭代，所以有了迭代器这么一个概念，而生成器则是基于迭代器的一种能够控制函数流程的方法，生成器基于迭代器的原理运行，反过来生成器也能够快速构建迭代器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;迭代器&#34;&gt;迭代器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当需要对某个迭代对象进行迭代处理时，由于&lt;strong&gt;迭代之前需要事先知道如何使用数据结构&lt;/strong&gt;，以及&lt;strong&gt;遍历顺序并不是数据结构固有的&lt;/strong&gt;，所以想寻求某种机制去统一迭代过程，对每一种可迭代类型，&lt;strong&gt;都用同一种迭代方法&lt;/strong&gt;，从而增加开发体验。（&lt;strong&gt;即无需事先知道如何迭代去实现迭代操作&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;于是基于以上原因，诞生了&lt;strong&gt;迭代器&lt;/strong&gt;概念，意在统一化所有迭代对象的处理方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;可迭代协议&#34;&gt;可迭代协议&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一个对象是&lt;strong&gt;可迭代对象&lt;/strong&gt;，则需要暴露一个属性作为&lt;strong&gt;默认迭代器&lt;/strong&gt;，并且该属性的&lt;code&gt;key&lt;/code&gt;为&lt;code&gt;Symbol.iterator&lt;/code&gt;，它的&lt;code&gt;value&lt;/code&gt;是一个&lt;strong&gt;工厂函数&lt;/strong&gt;，用于返回&lt;strong&gt;一个新迭代器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;js&lt;/code&gt;提供了一系列可以对&lt;strong&gt;可迭代对象&lt;/strong&gt;进行操作的原生结构，如下图所示。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;for-of&lt;/li&gt;
&lt;li&gt;数组解构&lt;/li&gt;
&lt;li&gt;扩展操作符号（即&lt;code&gt;...&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.from&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建集合&lt;/li&gt;
&lt;li&gt;创建映射&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.all()&lt;/code&gt;接受由Promise组成的可迭代对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.rice()&lt;/code&gt;接受由期约组成的可迭代对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yield*&lt;/code&gt;操作符，在生成器中使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;上述谈到的原生结构在对&lt;strong&gt;可迭代对象&lt;/strong&gt;进行操作时，会默认调用&lt;strong&gt;工厂函数&lt;/strong&gt;生成一个&lt;strong&gt;迭代器&lt;/strong&gt;，然后对迭代器进行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;迭代器协议&#34;&gt;迭代器协议&lt;/h4&gt;
&lt;h5 id=&#34;1-next和iteratorresult&#34;&gt;1. &lt;code&gt;next&lt;/code&gt;和&lt;code&gt;IteratorResult&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;可迭代协议描述了一个&lt;strong&gt;对象具有可迭代性质&lt;/strong&gt;的要求和前提，而&lt;strong&gt;迭代器协议&lt;/strong&gt;则是用于规范&lt;strong&gt;迭代器具有的性质和方法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;迭代器对象具有一个方法&lt;code&gt;next&lt;/code&gt;，通过迭代器API&lt;code&gt;next()&lt;/code&gt;能够在&lt;strong&gt;可迭代对象&lt;/strong&gt;中遍历数据，&lt;strong&gt;每次调用&lt;code&gt;next&lt;/code&gt;都能获取到一个&lt;code&gt;IteratorResult&lt;/code&gt;&lt;strong&gt;对象，其中包含迭代器返回的&lt;/strong&gt;下一个值&lt;/strong&gt;，如下所示。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 迭代器对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;iter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Symbol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// output
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// { value: 1, done: false }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// { value: 2, done: false }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// { value: 4, done: false }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// { value: undefined, done: true }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// { value: undefined, done: true }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>Web components</title>
      <link>https://runtus.top/posts/webcomponents/</link>
      <pubDate>Thu, 03 Aug 2023 10:12:13 +0800</pubDate>
      
      <guid>https://runtus.top/posts/webcomponents/</guid>
      <description>&lt;h2 id=&#34;web-components&#34;&gt;Web-Components&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Web-Components是一项&lt;strong&gt;标准，规范&lt;/strong&gt;，目前它包含了三项主要技术：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Custom Elements&lt;/code&gt;自定义元素：（标签）它是一组JavaScript API，能够自定义Element以及其行为。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shadow DOM&lt;/code&gt;影子DOM。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTML templates&lt;/code&gt;HTML模板：通过&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;元素编写不在呈现页面中显示的标记模板。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过这三个特性的共同作用能够&lt;strong&gt;创建封装功能的定制元素&lt;/strong&gt;，在说明Web-Component的用法之前，先简单说明上述三项特性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;custom-elements&#34;&gt;Custom Elements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自定义元素是Web Components中的一个重要特性，它能够让开发者将HTML页面（或者页面中的某个功能）封装为&lt;code&gt;custom elements&lt;/code&gt;，从而达到复用的目的。目前支持&lt;code&gt;custom elements&lt;/code&gt;的浏览器有&lt;strong&gt;FireFox，Chrome，Opera&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Custom Elements的管理是通过&lt;code&gt;CustomElementRegistry&lt;/code&gt;接口进行操作的，其用于处理Web文档中的&lt;code&gt;custom elements&lt;/code&gt;，同时它还提供&lt;strong&gt;注册自定义元素和查询已注册元素&lt;/strong&gt;的方法，它的实例通过&lt;code&gt;window.customElements&lt;/code&gt;属性来获得。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CustomElementRegistry&lt;/code&gt;接口有四个方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry/define&#34;&gt;&lt;code&gt;CustomElementRegistry.define()&lt;/code&gt;&lt;/a&gt;：定义一个新的自定义元素。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry/get&#34;&gt;&lt;code&gt;CustomElementRegistry.get()&lt;/code&gt;&lt;/a&gt;：返回指定自定义元素的构造函数，如果未自定义元素，则返回&lt;code&gt;undefined&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry/upgrade&#34;&gt;&lt;code&gt;CustomElementRegistry.upgrade()&lt;/code&gt;&lt;/a&gt;: 更新一个自定义元素。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry/whenDefined&#34;&gt;&lt;code&gt;CustomElementRegistry.whenDefined()&lt;/code&gt;&lt;/a&gt;：执行并返回一个已经定义的自定义元素的&lt;code&gt;promise&lt;/code&gt;，即如果定义了这么一个元素，那么返回对应的&lt;code&gt;promise&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;customelementregistrydefine&#34;&gt;&lt;code&gt;CustomElementRegistry.define()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;该方法是四个方法中最重要的方法，用于创建自定义元素，它接受三个参数：
&lt;ul&gt;
&lt;li&gt;自定义元素的名称，且其必须&lt;strong&gt;符合元素名称的&lt;code&gt;DOMString&lt;/code&gt;标准字符串&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;用于定义元素行为的&lt;strong&gt;类&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一个包含 &lt;code&gt;extends&lt;/code&gt; 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 自定义Div
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SelfDiv&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HTMLElement&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// super方法的调用是必须得
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;//  元素的相关业务代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 使用customElements实例(CustomElementRegistry接口)来完成注册功能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;customElements&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;define&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;word-count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SelfDiv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>Rust Trait</title>
      <link>https://runtus.top/posts/rust-trait/</link>
      <pubDate>Mon, 17 Jul 2023 20:09:43 +0800</pubDate>
      
      <guid>https://runtus.top/posts/rust-trait/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Rust中的特征Trait类似于其他语言中的接口，它定义了&lt;strong&gt;一组可以被共享的行为&lt;/strong&gt;，只要实现了特征，就能使用这组行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;特征-trait&#34;&gt;特征 Trait&lt;/h2&gt;
&lt;h4 id=&#34;特征的定义&#34;&gt;特征的定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;trait&lt;/code&gt;关键字对特征进行定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;trait&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GoClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;LeaveClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getClassRoom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;-&amp;gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>Rust包管理</title>
      <link>https://runtus.top/posts/rust%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 05 Jul 2023 17:33:19 +0800</pubDate>
      
      <guid>https://runtus.top/posts/rust%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文参考了Rust语言圣经中有关Rust包的介绍，攥写本章的目的是为了更好的掌握rust中包和模块的关系以及它们的代码组织方式，方便于未来的项目开发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;rust中代码组织相关概念&#34;&gt;Rust中代码组织相关概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在Rust中，代码的组织大致可以分为四个层次：
&lt;ol&gt;
&lt;li&gt;项目（Package）&lt;/li&gt;
&lt;li&gt;工作空间（Workspace）&lt;/li&gt;
&lt;li&gt;包（Crate）&lt;/li&gt;
&lt;li&gt;模块（Module）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;package-项目&#34;&gt;Package 项目&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Package其实就是通过命令&lt;code&gt;cargo new&lt;/code&gt;创建的项目文件，其&lt;strong&gt;显著特征&lt;/strong&gt;便是包含了&lt;strong&gt;cargo.toml&lt;/strong&gt;文件，该文件标注了该Package的一些基本信息：例如名称，版本号，依赖等等。&lt;/li&gt;
&lt;li&gt;一个Package由&lt;strong&gt;一个或多个包（Crate）&lt;strong&gt;组成，但是它最多只能包含一个&lt;/strong&gt;库类型的包（即名为lib.rs的文件）。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Package还可以分为&lt;strong&gt;二进制Package和库Package&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二进制package&#34;&gt;二进制Package&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;直接使用命令&lt;code&gt;cargo new package-name&lt;/code&gt;的Package-项目即为二进制项目，虽然在&lt;strong&gt;cargo.toml&lt;/strong&gt;中没有显示指出Package的入口文件，但Cargo的惯例是：&lt;strong&gt;src/main.rs&lt;/strong&gt;即为二进制&lt;strong&gt;包&lt;/strong&gt;的根文件，即入口文件，所有的代码的执行都是从&lt;strong&gt;src/main.rs&lt;/strong&gt;中的&lt;code&gt;fn main()&lt;/code&gt;中开始执行的。&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;cargo run&lt;/code&gt;可以直接编译运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;库package&#34;&gt;库Package&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;库Package在创建时需要增加&lt;code&gt;--lib&lt;/code&gt;命令行参数选项，即&lt;code&gt;cargo new package-lib-name --lib&lt;/code&gt;在，这样获得的Package是一个库Package，&lt;strong&gt;它只能作为一个第三方库被其他项目引用，而不能单独编译运行。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;与 &lt;code&gt;src/main.rs&lt;/code&gt; 一样，Cargo 知道，如果一个 &lt;code&gt;Package&lt;/code&gt; 包含有 &lt;code&gt;src/lib.rs&lt;/code&gt;，意味它包含有一个库类型的同名包 &lt;code&gt;my-lib&lt;/code&gt;，该包的根文件是 &lt;code&gt;src/lib.rs&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;package文件结构&#34;&gt;Package文件结构&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;需要注意的是，&lt;code&gt;main.rs&lt;/code&gt;和&lt;code&gt;lib.rs&lt;/code&gt;不是互斥关系，二者是可以共存的。当二者共存时，那就意味着它包含两个包：库包和二进制包，这两个包名也都是 &lt;code&gt;package-name&lt;/code&gt; —— 都与 &lt;code&gt;Package&lt;/code&gt; 同名。&lt;/li&gt;
&lt;li&gt;下面是一个Package的文件结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;Cargo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;Cargo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;lock&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;rs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;rs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;bin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;       &lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;main1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;rs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;       &lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;main2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;rs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;tests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;some_integration_tests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;rs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;benches&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;simple_bench&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;rs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;examples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;simple_example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;rs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>Node Typescript打包发布</title>
      <link>https://runtus.top/posts/node-typescript%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/</link>
      <pubDate>Sun, 07 May 2023 11:21:13 +0800</pubDate>
      
      <guid>https://runtus.top/posts/node-typescript%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/</guid>
      <description>&lt;h3 id=&#34;使用rollup打包typscript-node项目为第三方库&#34;&gt;使用rollup打包typscript-node项目为第三方库&lt;/h3&gt;
&lt;h4 id=&#34;tsc和rollup对比&#34;&gt;tsc和rollup对比&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;tsc是Typescript官方的编译器，本身也具有打包功能，但是其本质只是&lt;strong&gt;编译器&lt;/strong&gt;，它适合于打包&lt;strong&gt;直接运行的&lt;/strong&gt;大型项目文件，并不适合构建&lt;strong&gt;独立的第三方库或组件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;rollup则是&lt;strong&gt;javascript打包器&lt;/strong&gt;，它可以将ES6模块打包称单个javascript文件，同时它本身也采用了&lt;a href=&#34;https://blog.csdn.net/weixin_42089660/article/details/118072554&#34;&gt;Tree Shaking&lt;/a&gt;优化算法，能使得打包文件大小得到进一步的优化。&lt;/li&gt;
&lt;li&gt;另一方面，rollup支持插件功能，通过设置插件能满足大部分时候的打包需求，在下面即将要讲解的打包中，插件提供了很大的帮助。&lt;a href=&#34;https://github.com/rollup/awesome&#34;&gt;RollUp插件集合网站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rollup打包流程&#34;&gt;rollup打包流程&lt;/h4&gt;
&lt;h4 id=&#34;本地安装-rollup&#34;&gt;本地安装 rollup&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;就我个人而言，不推荐安装全局的rollup包，因为在协同工作时，这样会导致rollup版本&lt;strong&gt;得不到统一而产生打包错误&lt;/strong&gt;，所以推荐在本地安装rollup，本文使用的包管理工具为&lt;code&gt;yarn&lt;/code&gt;，安装命令如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yarn add rollup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;安装完毕后，在&lt;code&gt;package.json&lt;/code&gt;文件里设置对应的脚本，用于快速启动打包。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// package.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rollup -c&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>Functional_Program_3</title>
      <link>https://runtus.top/posts/functional_program_3/</link>
      <pubDate>Thu, 23 Mar 2023 09:28:58 +0800</pubDate>
      
      <guid>https://runtus.top/posts/functional_program_3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;关于副作用以及外部引用与函数式编程的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;pure-happiness-with-pure-functions&#34;&gt;Pure Happiness with Pure Functions&lt;/h2&gt;
&lt;h3 id=&#34;禁止与外界交互&#34;&gt;禁止与外界交互&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在第二章中也有说到，保持纯函数的关键在于不能与外界有直接交互，即直接引用。&lt;/li&gt;
&lt;li&gt;这样有个好处是能让函数能够自给自足，从而能够只看函数本身就能更加轻松了解到函数本身的功能，而不需要借助外部变量来理解，例如以下的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minimum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;checkAge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;minium&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;checkage&lt;/code&gt;依赖与外部变量minium，假如该变量声明的位置很远，当后续维护时会对这段代码返回的结果感到匪夷所思，不知道其值到底从何而来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;副作用&#34;&gt;副作用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于函数而言，函数的副作用就是函数执行时对外界环境产生了影响（无论是依赖还是修改）。&lt;/li&gt;
&lt;li&gt;上述的与外界交互也算是副作用的一种，副作用在计算机领域并不是贬义的含义，只是对代码执行过程的一种结果的描述，只不过&lt;strong&gt;在函数式编程中，副作用被视为不好的程序过程执行。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;下面列举了一些副作用的例子。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;更改文件&lt;code&gt;fs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数据库访问&lt;/li&gt;
&lt;li&gt;发起http请求&lt;/li&gt;
&lt;li&gt;DOM控制&lt;/li&gt;
&lt;li&gt;获取系统状态&lt;/li&gt;
&lt;li&gt;获取用户的输入&lt;/li&gt;
&lt;li&gt;so on&amp;hellip;..&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;并不是说在函数式编程中，我们要&lt;strong&gt;完全&lt;/strong&gt;拒绝以上操作，而是要&lt;strong&gt;能控制这一系列&lt;/strong&gt;操作。后续会介绍如何去进行这一个控制过程（柯里化），下面先介绍如何将纯函数从一个普通的函数中分离出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;纯函数的分离&#34;&gt;纯函数的分离&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个对外界依赖的函数要分离成纯函数，就必须要显式告知函数要依赖的对象是谁，即把要依赖的对象作为参数传递，从而将&lt;strong&gt;外部依赖&lt;/strong&gt;改为&lt;strong&gt;内部依赖&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 不纯函数，其没有显示告知函数依赖的对象是谁。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;signUp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;welcomeUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// pure -&amp;gt; 将DB，Email显示告知
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;signUp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;welcomeUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>Functional_Program</title>
      <link>https://runtus.top/posts/functional_program_2/</link>
      <pubDate>Tue, 21 Mar 2023 21:34:36 +0800</pubDate>
      
      <guid>https://runtus.top/posts/functional_program_2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;读 Professor Frisby&amp;rsquo;s Mostly Adequate Guide to Functional Programming 记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://mostly-adequate.gitbook.io/mostly-adequate-guide/&#34;&gt;Functional Programming原文链接&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本章主要简单介绍函数式编程中的一等公民，以及函数式编程的一些注意事项和好处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第二章-first-class-functions&#34;&gt;第二章: First Class Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在函数式编程中，函数是作为&lt;strong&gt;一等公民&lt;/strong&gt;存在的，应该把函数和其他变量等同，即&lt;strong&gt;函数也是变量，变量的类型也可以是函数，函数的参数也可以是函数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Hi, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;greeting&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;hi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;小明&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>Rust-所有权</title>
      <link>https://runtus.top/posts/rust-%E5%80%9F%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8/</link>
      <pubDate>Wed, 26 Oct 2022 22:54:43 +0800</pubDate>
      
      <guid>https://runtus.top/posts/rust-%E5%80%9F%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;所有权系统和引用在Rust中是至关重要的，它的设计使得rust的GC机制与众不同，也让rust获得了性能上的回报。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;所有权&#34;&gt;所有权&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有权：一个数值只能被&lt;strong&gt;一个变量&lt;/strong&gt;所拥有，即该变量唯一拥有该数值，若变量离开了其作用域，数值也会被释放掉。&lt;/li&gt;
&lt;li&gt;如果将一个变量赋值给另一个变量，则意味着对应的值的所有权会被移交出去，那么原先的变量将&lt;strong&gt;不再拥有值的所有权&lt;/strong&gt;，这也是为什么在rust中，变量的赋值也叫&lt;strong&gt;变量的绑定&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 例子
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 所有权移交 -&amp;gt; 即move
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;println!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 报错
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>再拾docker</title>
      <link>https://runtus.top/posts/%E5%86%8D%E6%8B%BEdocker/</link>
      <pubDate>Sat, 29 Jan 2022 11:10:01 +0000</pubDate>
      
      <guid>https://runtus.top/posts/%E5%86%8D%E6%8B%BEdocker/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录docker的基本概念和用法，系统的再认识一次docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;docker是什么&#34;&gt;docker是什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker是对Linux容器的一种封装，并提供简单易用的接口，同时它也是目前最流行的Linux容器解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在docker出现之前，环境移植一直是非常麻烦的事情，当我们需要把项目从一台机器迁移到另一台机器时，不仅仅是迁移源代码，更重要的是要保证环境的一致性，而一次次环境的搭建则显得冗余且效率极低，所以在思考有没有一种方式能够把环境一起进行迁移。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚拟机&lt;/strong&gt;的出现在一定程度上解决了这个问题，但接踵而至的问题是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虚拟机占用资源多，它本质就是一台完整的操作系统，&lt;/li&gt;
&lt;li&gt;冗余步骤多，由于是完整的操作系统，一些系统级别的操作步骤不可避免。&lt;/li&gt;
&lt;li&gt;启动慢。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以Linux发展出了另一种&lt;strong&gt;虚拟化技术&lt;/strong&gt;：Linux容器。而docker则是Linux容器的一种解决方案（也是最流行的）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以简单的将docker理解为一种&lt;strong&gt;非常轻量级的虚拟机&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;docker镜像image文件&#34;&gt;docker镜像（image文件）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker把&lt;strong&gt;应用程序及其依赖&lt;/strong&gt;打包在image文件里，通过image文件，就会生成&lt;strong&gt;容器（后续会提到）&lt;/strong&gt;，即镜像文件其实就是容器的模版，而容器则是镜像文件的实例（可以一一对应&lt;strong&gt;类与对象&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;image文件是二进制文件。在实际开发中，我们会在别人写好的image文件上加一些自定义设置从而形成我们需要的image文件，而不是自己从零开发一个image文件（当然，有需求另说）。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 有关image命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker image ls &lt;span class=&#34;c1&#34;&gt;# 列出docker镜像&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker image rm &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;imageName&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 删除某镜像文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;容器文件&#34;&gt;容器文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;由image生成的容器实例，本身也是一个文件，称为&lt;strong&gt;容器文件&lt;/strong&gt;。同时，当关闭容器时不会删除容器文件，只是让容器停止运行而已。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker container ls &lt;span class=&#34;c1&#34;&gt;# 本机正在运行的容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker container ls --all &lt;span class=&#34;c1&#34;&gt;# 本机所有容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>go-learning-1</title>
      <link>https://runtus.top/posts/go-learning-1/</link>
      <pubDate>Fri, 28 Jan 2022 09:13:38 +0000</pubDate>
      
      <guid>https://runtus.top/posts/go-learning-1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Golang学习记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;关于swtich&#34;&gt;关于swtich&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Golang中的switch的每个case自带break关键字，即不用手动去设置break关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 	 	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;114514&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 12
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>0120-浏览器事件</title>
      <link>https://runtus.top/posts/0120-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Thu, 20 Jan 2022 10:30:44 +0000</pubDate>
      
      <guid>https://runtus.top/posts/0120-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Javascript和HTML的交互都是通过&lt;strong&gt;事件&lt;/strong&gt;来实现的，而事件的产生与执行则是遵循着传统软件工程领域中的&lt;strong&gt;观察者模式&lt;/strong&gt;，其能够做到&lt;strong&gt;页面行为&lt;/strong&gt;和&lt;strong&gt;页面展示&lt;/strong&gt;的解耦合。&lt;/p&gt;
&lt;p&gt;本节内容会从事件流谈起，然后逐一介绍几种注册事件的方式以及他们其中的一些细节，最后还会提到关于**事件委托（代理）**的概念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;事件流&#34;&gt;事件流&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;事件流描述了页面接受事件的&lt;strong&gt;顺序&lt;/strong&gt;。因为一个事件的触发可能会影响好几处地方，这很容易理解，比如在页面上嵌套着写了几个div元素，同时在最里层的div元素上进行&lt;strong&gt;事件触发&lt;/strong&gt;，那这不仅仅是最内层的div对事件进行响应，任意一层的嵌套的div都会对事件进行相应处理。（其实通过上述的观察者模式也可以推断出其合理性，因为一个对象可以由多个观察者进行观察）&lt;/li&gt;
&lt;li&gt;所以多个监听事件的元素响应顺序需要进行统一，因为一些历史原因，事件的响应顺序有两种模式：&lt;strong&gt;冒泡和捕获&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事件冒泡&#34;&gt;事件冒泡&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;顾名思义，事件的冒泡就如水底下的气泡一下，&lt;strong&gt;从内到外&lt;/strong&gt;，同理，事件冒泡规定的事件流顺序也是从内而外，事件会从最深层的节点开始触发，然后向外传播到document（文档）。&lt;/li&gt;
&lt;li&gt;代码如下所示。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ddd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      	click me
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>DOM扩展</title>
      <link>https://runtus.top/posts/dom%E6%89%A9%E5%B1%95/</link>
      <pubDate>Sun, 26 Dec 2021 10:22:54 +0000</pubDate>
      
      <guid>https://runtus.top/posts/dom%E6%89%A9%E5%B1%95/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;虽然原生DOM API已经能做许多事情了，但是仍然不断有标准或专有的扩展出现，以支持更多的功能，由于各个浏览器对DOM扩展的支持是专有的，为了统一这些专有的DOM API，W3C开始着手将这些&lt;strong&gt;专有扩展转变为标准规范&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;selectors-api&#34;&gt;Selectors API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Selectors APIs 是浏览器原生支持的CSS查询API，由于是原生支持，解析和遍历DOM树可以通过底层编译语言实现，相比其他Javascript库（比如jQuery），性能有数量级的提升。&lt;/li&gt;
&lt;li&gt;Selectors API Level 1 主要是两个API：querySelector() 和 querySelectorAll()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;queryselector&#34;&gt;querySelector()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;该方法接受CSS选择符参数，返回匹配到的&lt;strong&gt;第一个后代元素&lt;/strong&gt;，如果没有匹配元素则返回null。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 匹配 class 为 list 的第一个DOM元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.list&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 匹配 id 为 myDiv 的第一个DOM元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#myDiv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 匹配 class=header DOM元素子元素中 id为someDiv的元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.header&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#someDiv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>1224-浏览器缓存</title>
      <link>https://runtus.top/posts/1224-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</link>
      <pubDate>Fri, 24 Dec 2021 10:35:37 +0000</pubDate>
      
      <guid>https://runtus.top/posts/1224-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;浏览器缓存是性能优化中最&lt;strong&gt;直接，高效&lt;/strong&gt;的优化方式，它可以显著减少因为网络传输而带来的损耗。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对于数据请求来说，大致可以分为 &lt;strong&gt;请求 -&amp;gt; 处理 -&amp;gt; 响应&lt;/strong&gt;这三个步骤，而浏览器缓存则主要在第一步和第三步&lt;strong&gt;做手脚&lt;/strong&gt;，即请求发出时寻找合适的缓存，拿到新的响应数据时做新的缓存。&lt;/li&gt;
&lt;li&gt;缓存带给我们最直观的感受就是，每次加载页面，第二次之后加载总是比第一次加载的更快，这就是缓存的功劳，下面讲从&lt;strong&gt;缓存位置和缓存策略&lt;/strong&gt;两个方面介绍浏览器相关缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缓存位置&#34;&gt;缓存位置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;浏览器的缓存位置大概可以分为四种：
&lt;ol&gt;
&lt;li&gt;Service Worker&lt;/li&gt;
&lt;li&gt;Memory Cache&lt;/li&gt;
&lt;li&gt;Disk Cache&lt;/li&gt;
&lt;li&gt;Push Cache（HTTP 2）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;他们有各自的优先级，当发出请求时，浏览器会依次去寻找缓存，如果都没有命中，才会发出请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service-worker&#34;&gt;Service Worker&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Service Worker是浏览器背后的&lt;strong&gt;独立线程&lt;/strong&gt;，可以用来实现缓存功能，但是需要注意，如果要使用Service Worker，&lt;strong&gt;传输协议必须是HTTPS&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Service Worker实现缓存大致三个步骤。
&lt;ol&gt;
&lt;li&gt;注册Service Worker。&lt;/li&gt;
&lt;li&gt;监听install事件，并对需要的文件进行缓存。&lt;/li&gt;
&lt;li&gt;拦截HTTPS请求，&lt;strong&gt;并根据请求内容去命中缓存&lt;/strong&gt;，如果命中，则直接使用缓存，否则请求数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;下面是一串实例代码（源代码来自前端面试之道）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// index.js
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serviceWorker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;navigator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;serviceWorker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;sw.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;service worker 注册成功&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;servcie worker 注册失败&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// sw.js
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 监听install事件，缓存文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;install&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;waitUntil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;caches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;my-cache&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./index.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./index.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 拦截请求，并根据请求去命中响应数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fetch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;respondWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;caches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fetch source&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>1222-DOM</title>
      <link>https://runtus.top/posts/1222-dom1/</link>
      <pubDate>Wed, 22 Dec 2021 13:01:26 +0000</pubDate>
      
      <guid>https://runtus.top/posts/1222-dom1/</guid>
      <description>&lt;p&gt;NodeList 和 HTMLCollection区别&lt;/p&gt;
&lt;p&gt;NodeList是节点的集合，而HTMLCollection是元素的集合。&lt;/p&gt;
&lt;p&gt;节点包括很多类型，文档节点，元素节点，属性节点，文本节点，这一点通过Node类型上的12个数值常量表示就可以看出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.ELEMENT_NODE（1） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.ATTRIBUTE_NODE（2） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.TEXT_NODE（3） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.CDATA_SECTION_NODE（4） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.ENTITY_REFERENCE_NODE（5） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.ENTITY_NODE（6） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.PROCESSING_INSTRUCTION_NODE（7） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.COMMENT_NODE（8） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.DOCUMENT_NODE（9） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.DOCUMENT_TYPE_NODE（10） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.DOCUMENT_FRAGMENT_NODE（11） 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Node.NOTATION_NODE（12）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 常用的获取DOM元素的接口及其返回的数据结合类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;childNodes&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Nodelist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;chidren&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HTMLCollection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementByxxxx&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;HTMLCollection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>1220-客户端检测</title>
      <link>https://runtus.top/posts/1220-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Mon, 20 Dec 2021 11:22:31 +0000</pubDate>
      
      <guid>https://runtus.top/posts/1220-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;如今的浏览器虽然接口已大致统一，但是每家浏览器难免都有自己的“想法”，于是会出现个别的不统一，这些差异迫使Web开发者自己去设计兼容这些差异，&lt;strong&gt;客户端检测&lt;/strong&gt;就是最常见的检测手段，通过检测结果来进一步克服和避免这些缺陷。&lt;/p&gt;
&lt;p&gt;客户端检测可大致分为三种：能力检测，用户代理检测，软件与硬件检测。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;能力检测&#34;&gt;能力检测&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;能力检测也成为特性检测，因为不同浏览器提供的接口不是完全相同，于是可以通过简单的逻辑判断来检测&lt;strong&gt;在该浏览器环境下能否调用特定API&lt;/strong&gt;，同时还能间接判断出浏览器类型。&lt;/li&gt;
&lt;li&gt;比如，在IE5之前没有&lt;code&gt;document.getElementById&lt;/code&gt;这个DOM方法，但是可以通过&lt;code&gt;document.all&lt;/code&gt;来实现相同的功能。于是，可以进行如下的能力检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;该浏览不支持任何通过ID获取DOM元素的方法&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>设计模式 - 观察者模式 - 发布订阅模式</title>
      <link>https://runtus.top/posts/1218-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 18 Dec 2021 16:06:30 +0000</pubDate>
      
      <guid>https://runtus.top/posts/1218-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;观察者模式和发布订阅模式是平常业务开发中最常见的设计模式，虽然网上大多数文章将二者归为一类，其实不然，它们两者之间还是有细微的差距。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;先来个观察者模式的定义&#34;&gt;先来个观察者模式的定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的&lt;strong&gt;某个属性（或状态）&lt;strong&gt;发生变化时，会通知所有观察者对象，让它们&lt;/strong&gt;自动更新&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;现实映射&#34;&gt;现实映射&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;举一个🌰，高中的时候，我会经常去问老师问题，有时候遇到比较难的问题，老师一时半会解不开，老师会说**&amp;ldquo;你先去做其他的事情吧，一会儿我找到解题思路了来叫你&amp;rdquo;**。于是乎我先去做其他事情，等待老师的召唤。过了一会儿，老师叫另一个同学来叫我去办公室找他，于是我马上放下手中的活，冲向的老师的办公室&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;li&gt;在这里例子里，我是一位观察者，而老师则是一位我观察的对象，当老师的状态发生了变化（指想出了题的思路），我就会接受到对应的信息，然后马上更新我自己的状态（指润去找老师）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;来点转换&#34;&gt;来点转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上述例子如果在&lt;code&gt;发布-订阅&lt;/code&gt;模式里，我则摇身一变，变成了订阅者，专门订阅老师发布的&lt;strong&gt;通知信息&lt;/strong&gt;，而老师则作为了&lt;strong&gt;发布者&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;其实，上述例子还不能完全展示出定义所说的&lt;strong&gt;一对多关系&lt;/strong&gt;，因为订阅者只有我一个人，但其实稍微扩展一下，变成&lt;strong&gt;多位同学向老师询问同一道题目&lt;/strong&gt;，那这就是标准的&lt;strong&gt;观察者模式&lt;/strong&gt;了，多位观察者“观察”老师的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;来点代码&#34;&gt;来点代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过上述的定义和描述，大概可以知道，在观察者模式中，一共有&lt;strong&gt;两个类：发布者类和订阅者类&lt;/strong&gt;。作为一个发布者，很容易可以想到它有下面几个基本方法：&lt;strong&gt;增加订阅者，通知订阅者，移除订阅者&lt;/strong&gt;。思路有了，下面就直接实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 发布者类
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Publisher&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// Observer -&amp;gt; 观察员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 添加订阅者
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 移除订阅者
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;observer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 通知订阅者
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;observers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 注意，订阅者的方法应该它们本身定义的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>vuepress开发遇到的一些问题</title>
      <link>https://runtus.top/posts/vuepress%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 13 Nov 2021 16:31:09 +0000</pubDate>
      
      <guid>https://runtus.top/posts/vuepress%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;vuepress是SSR渲染，即vue挂载之前是在服务端进行的，所以尽量不要在before Mounted之前的hooks中调用浏览器API，否则打包时会报错。&lt;/li&gt;
&lt;li&gt;关于css中的 mix-blender滤镜模式，和 z-index关联比较多，具体体现在我在使用darkmodejs时，如何避免图片被mix-blender渲染，虽然官方给的方法是加入isolation：isolate属性（另启层叠上下文），但是并没有什么用，感觉是哪个地方出问题了，关于层叠上下文还有上述提到的属性需要重新学习下。
&lt;ul&gt;
&lt;li&gt;另外，层叠上下文z-index和position关联很大，这个也要去做深究，我如果只是给image加z-index，则无法避免被滤镜覆盖的事实，应该是需要把他们纳入统一个层叠上下文才行，所以需要position：relative（注意，position默认是static）。这一块儿的知识也要重点去温习。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;testFn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// xxxxxx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>初入数据可视化</title>
      <link>https://runtus.top/posts/%E5%88%9D%E5%85%A5%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <pubDate>Sun, 17 Oct 2021 10:56:45 +0000</pubDate>
      
      <guid>https://runtus.top/posts/%E5%88%9D%E5%85%A5%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      <description>&lt;p&gt;视图编码（可视化编码） = 标记 + 视觉通道&lt;/p&gt;
&lt;h3 id=&#34;可视化设计的三部曲&#34;&gt;可视化设计的三部曲&lt;/h3&gt;
&lt;p&gt;可展示数据的筛选 -&amp;gt; 可视化编码映射（视图编码） -&amp;gt; 视图与交互设计&lt;/p&gt;
&lt;h3 id=&#34;数据可视化设计的注意事项&#34;&gt;数据可视化设计的注意事项&lt;/h3&gt;
&lt;p&gt;在对数据可视化之前，要选择合适的标记和视觉通道，选择&lt;strong&gt;合适的视觉通道&lt;/strong&gt;编码能够更加清晰，直观地展现出数据的特点，同时能够使用户更加容易地分析数据特征。&lt;/p&gt;
&lt;p&gt;不同的视觉通道编码信息会产生不同的效果，这种效果也被称为&lt;strong&gt;表现力和有效性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;表现力和有效性决定着数据可视化的最终效果。&lt;/p&gt;
&lt;p&gt;在表现力排序中，无论是定量型视觉通道还是定性型视觉通道，&lt;strong&gt;空间位置都具有最大表现力&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;决定表现力的四个维度&#34;&gt;决定表现力的四个维度：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;精准性&lt;/li&gt;
&lt;li&gt;可辨认性&lt;/li&gt;
&lt;li&gt;可分离性 -&amp;gt; 不同的视觉通道编码之间互相干扰的程度&lt;/li&gt;
&lt;li&gt;视觉突出 -&amp;gt; 人依靠本能，在很快的时间内快速感应到图形中的&lt;strong&gt;异常点&lt;/strong&gt;。此维度在&lt;strong&gt;发现异常数据的可视化分析&lt;/strong&gt;中至关重要。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;提升表现力的方法&#34;&gt;提升表现力的方法：&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;聚焦：通过恰当的技术手段就将可视化结果中的最重要的部分重点突出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;均衡：空间布局要合理，将重要的元素位于中心区域，其余元素均衡分布。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单：元素尽量简单，避免画面过于复杂。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐喻：尽量用人们所熟悉的某样事物去表达信息，从而使得可视化内容更加直观、易懂。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据按照它们之间的特征，可以大致分为以下的三类：&lt;/p&gt;
&lt;p&gt;数值型数据，分类型数据，有序性数据&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>保研说明</title>
      <link>https://runtus.top/posts/0907-%E5%BC%80%E7%AF%87%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Fri, 15 Oct 2021 11:30:03 +0000</pubDate>
      
      <guid>https://runtus.top/posts/0907-%E5%BC%80%E7%AF%87%E8%AF%B4%E6%98%8E/</guid>
      <description>保研</description>
    </item>
    
    <item>
      <title>谈谈保研经历</title>
      <link>https://runtus.top/posts/%E8%B0%88%E8%B0%88%E4%BF%9D%E7%A0%94%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Mon, 04 Oct 2021 10:05:44 +0000</pubDate>
      
      <guid>https://runtus.top/posts/%E8%B0%88%E8%B0%88%E4%BF%9D%E7%A0%94%E7%BB%8F%E5%8E%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这篇博客主要记录的是保研的大概过程以及作者今年从六月份到九月份的保研经历，希望能够让未来保研的学弟学妹们更清晰地了解保研的整个过程以及其中的一些避坑指南。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;本人基本情况&#34;&gt;本人基本情况📖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本科院校：&lt;strong&gt;电子科技大学/信息与软件工程学院&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;均分：87.5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排名：18/186（10%）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;四级：500&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;六级：492&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无科研经历&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;竞赛获得奖项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中国软件杯国家三等奖&lt;/li&gt;
&lt;li&gt;三创杯四川省二等奖&lt;/li&gt;
&lt;li&gt;微信小程序开发大赛西南赛区三等奖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最终去向：电子科技大学/计算机科学与工程学院（电子信息）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上述基本情况可以看出，本人在本科期间不算优秀，没有任何科研经历，竞赛也是一些较小的比赛，不过好在大三时去字节跳动实习过半年，这也算是一个加分项。&lt;/p&gt;
&lt;h3 id=&#34;保研基本流程&#34;&gt;保研基本流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总的来说，保研基本分为三个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;夏令营（六月 - 八月）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预推免（八月末 - 九月）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;九推（九月 - 十月系统关闭）&lt;/strong&gt;（这里的系统是指&lt;strong&gt;国家推免招生系统&lt;/strong&gt;，后续会提到）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其中，需要注意的是前两个阶段，即&lt;strong&gt;夏令营和预推免&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;夏令营&#34;&gt;夏令营&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;夏令营是可以等效理解为&lt;strong&gt;高考录取的提前一批&lt;/strong&gt;，各位学生通过&lt;strong&gt;学校研究生院官网&lt;/strong&gt;了解到对应院校的夏令营信息，通过&lt;strong&gt;报名，学院筛选&lt;/strong&gt;后，进入到院校夏令营中。如下的两个链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://grawww.nju.edu.cn/19/e8/c905a530920/page.htm&#34;&gt;南京大学夏令营信息&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据结构-杂记</title>
      <link>https://runtus.top/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9D%82%E8%AE%B0/</link>
      <pubDate>Mon, 20 Sep 2021 10:03:52 +0000</pubDate>
      
      <guid>https://runtus.top/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9D%82%E8%AE%B0/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这是一篇不成体系的记录，只是为了记录一些零散的容易忘记的概念知识点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;线性表&#34;&gt;线性表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;具有&lt;strong&gt;相同&lt;/strong&gt;数据类型的n（n &amp;gt;= 0）个数据元素的&lt;strong&gt;有限&lt;/strong&gt;序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顺序表&#34;&gt;顺序表&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;线性表的&lt;strong&gt;顺序存储&lt;/strong&gt;又称为顺序表， 即用一组&lt;strong&gt;连续的存储空间&lt;/strong&gt;来存储线性表中的元素。&lt;/li&gt;
&lt;li&gt;顺序表特点：逻辑&lt;strong&gt;顺序&lt;/strong&gt;和物理顺序相同。&lt;/li&gt;
&lt;li&gt;高级语言中，顺序表的代表为&lt;strong&gt;数组&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;线性表的链式存储&#34;&gt;线性表的链式存储&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;地址没有要求连续，即要求逻辑上相邻的数据在物理存储上没有要求，数据与数据之间通过指针来进行联系。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;线性表一般有两种表现方式（根据存储方式的不同）：顺序表和链表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;栈&#34;&gt;栈&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一种特殊的&lt;strong&gt;线性表&lt;/strong&gt;，不过要求只能在一端进行数据的读写（推入push和弹出pop）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;堆&#34;&gt;堆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;计算机中一种特殊的数据结构，它通常被看作是用一棵树的数组对象。&lt;/li&gt;
&lt;li&gt;它有两个特性：
&lt;ol&gt;
&lt;li&gt;堆一定是一颗完全二叉树（所以才可以用数组来表示）&lt;/li&gt;
&lt;li&gt;二叉树里所有的子树的根节点都大于（或小于）它的子节点，即大根堆和小根堆的区别。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>计算机网络-网络层</title>
      <link>https://runtus.top/posts/0913-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 13 Sep 2021 10:49:53 +0000</pubDate>
      
      <guid>https://runtus.top/posts/0913-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;网络层被设计成“向上提供简单灵活的，无连接的，尽最大努力交付的数据报服务”的特性，即所传输的分组没有保证，可能出错，丢失，重复，失序，或超时。&lt;/p&gt;
&lt;p&gt;但这样设置好处是：网络的造价大大降低（比如路由器），运行方式灵活，能够适应多种应用（即在网络层之上的传输层可以基于灵活的网络层作很多拓展工作）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;异构网络互联&#34;&gt;异构网络互联&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不同协议的网络子系统通过**中间设备（中继设备）**相互连接起来，形成更大的系统。（P135）
&lt;ul&gt;
&lt;li&gt;中继设备：
&lt;ul&gt;
&lt;li&gt;物理层：中继器，集线器（Hub）&lt;/li&gt;
&lt;li&gt;数据链路层：网桥或交换机&lt;/li&gt;
&lt;li&gt;网络层：路由器&lt;/li&gt;
&lt;li&gt;网络层之上：网关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;路由与转发&#34;&gt;路由与转发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;路由器的两功能：路由选择（确定哪一条路径 =&amp;gt; 构建和维护路由表）和分组转发（当一个分组到达时要完成的动作 =&amp;gt; 查询，转发以及队列管理和任务调度等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;拥塞控制&#34;&gt;拥塞控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;网络进入拥塞状态的方法：&lt;strong&gt;观察网络吞吐量和负载的关系&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;如果随着网络负载的增加，网络的吞吐量&lt;strong&gt;明显&lt;/strong&gt;小于正常吞吐量（或者不增反降），则说明可能（一定）进入了拥塞状态。（注意：正常情况下，负载越高，吞吐量越大）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;拥塞控制和流量控制联系到链路层的流量控制的区别&#34;&gt;拥塞控制和流量控制（联系到链路层的流量控制）的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;流量控制是在发送端和接受端点对点通信时的数据传输控制，&lt;strong&gt;它数局部性控制，且是接收端来控制发送端&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;而拥塞控制则是一个&lt;strong&gt;全局性的问题&lt;/strong&gt;，它确保的是一个&lt;strong&gt;子网内&lt;/strong&gt;的数据能够成功传输到彼此。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;拥塞控制的方法&#34;&gt;拥塞控制的方法&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;开环控制：静态的预防方法，系统启动后，设置的控制调度算法不能改版。&lt;/li&gt;
&lt;li&gt;闭环控制：动态方法，采用监测网络系统去监视，及时检测哪里发生了拥塞，然后将拥塞的信息传输到合适的地方，以便调整网络系统的运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;路由算法&#34;&gt;路由算法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;静态路由算法 =&amp;gt; 网络管理员手动配置的路由信息，它&lt;strong&gt;不能适应网络状态的变化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;动态路由算法  =&amp;gt; 通过路由器之间相互传递信息并且根据一定的算法，&lt;strong&gt;实时更新路由表的信息&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;动态路由算法的两个主要算法&#34;&gt;动态路由算法的两个主要算法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;距离-向量路由算法 =&amp;gt; 实现协议&lt;strong&gt;RIP（路由信息协议）&lt;/strong&gt; =&amp;gt; &lt;strong&gt;应用层协议，使用了UDP传送数据&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;所有结点定期地将它们的**整个路由选择表（下面统称为路由表）**传送给其所有的相邻结点。&lt;/li&gt;
&lt;li&gt;每个结点从相邻结点拿到路由表信息后，迭代计算到每个结点的最短距离，并实时更新自己的路由表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链路状态路由算法 =&amp;gt; 实现协议&lt;strong&gt;OSPF（开放最短路径优先）&lt;/strong&gt; =&amp;gt; &lt;strong&gt;网络层协议，使用ip数据包传递数据&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每个结点（路由器）向本自治系统的所有节点发送自己和自己&lt;strong&gt;相邻&lt;/strong&gt;路由器之间的链路状态，即先把信                                                                                                                                                                                                                                                      息发送给相邻的路由器，然后通过相邻的路由器再次发送给它的相邻路由器，这样不断迭代传递，最终所有结点都能获得发送结点的相邻链路状态。 =&amp;gt; &lt;strong&gt;泛洪法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;最后每个路由器都能获得自治系统内所有节点的相邻链路状态，然后按照一定的算法，更新自己的路由转发表。&lt;/li&gt;
&lt;li&gt;所以该算法要求&lt;strong&gt;每个参与算法的结点都具有完全的网络拓扑信息&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;层次路由&#34;&gt;层次路由&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;设想一下，如果对网络中众多的路由不分层次，则会使得每次转发的路由表（或链路信息）异常庞大，无论是更新还是查阅都会非常消耗性能，其次灵活性也不高，因为没有分层，导致整个路由系统必须统一协议标准，而&lt;strong&gt;不能“因地制宜”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;所以考虑把整个互联网划分为较小的自治系统（每个自治系统有多个局域网），每个较小的自治系统可以设置自己的路由协议，同时也需要自治系统间的协议来&lt;strong&gt;屏蔽不同路由协议自治系统的通信&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;自治系统内使用的路由选择协议叫做&lt;strong&gt;内部网关协议（IGP）&lt;/strong&gt; =&amp;gt; 例如RIP，OSPF等&lt;/li&gt;
&lt;li&gt;自治系统间使用的路由选择协议叫做&lt;strong&gt;外部网关协议（EGP）&lt;/strong&gt; =&amp;gt; 例如BGP等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipv4&#34;&gt;ipv4&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ipv4分组格式如下所示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://lao-lan-go.oss-cn-beijing.aliyuncs.com/runtu_blog/pages/ipv4.png&#34; alt=&#34;ipv4分组格式&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络-链路层</title>
      <link>https://runtus.top/posts/0910-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/</link>
      <pubDate>Fri, 10 Sep 2021 14:37:48 +0000</pubDate>
      
      <guid>https://runtus.top/posts/0910-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;链路层重点：组帧，流量控制与可靠传输机制，介质访问控制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;数据链路层是在物理层提供服务的基础上为网络层提供相关服务，它能够加强物理层中比特流的传输，也能将物理层上可能会出错的物理链路改造为逻辑上无差错的数据链路，然后为网络层提供对应服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为网络层提供的连接服务&#34;&gt;为网络层提供的连接服务&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;无确认，无连接服务。&lt;/li&gt;
&lt;li&gt;有确认，无连接服务。&lt;/li&gt;
&lt;li&gt;有确认，有连接服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;需要注意的是：只要是能够连接，则一定会有确认，即不存在无确认，有连接的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;帧定界&#34;&gt;帧定界&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据帧的长度由首部，尾部，以及数据三者决定，而首部和尾部包含了许多控制信息，其中就包含了帧边界的标识，这就是所谓的&lt;strong&gt;帧定界&lt;/strong&gt;。（注意：链路层封装的数据帧也称为&lt;strong&gt;组帧&lt;/strong&gt;，它的作用就是解决帧定界，帧同步，透明传输等问题）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透明传输：接受方能够正确识别帧尾部，而不会因为&lt;strong&gt;数据段有和尾部相同&lt;/strong&gt;的标识而提前结束帧识别。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下面列举几种帧定界的方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字符计数法。&lt;/li&gt;
&lt;li&gt;字符填充的首位定界符法。&lt;/li&gt;
&lt;li&gt;零比特填充的首位标志法。&lt;/li&gt;
&lt;li&gt;违规编码法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MTU（最大传输单元）：帧数据部分长度的上线（IP数据包）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;差错控制&#34;&gt;差错控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比特传输过程中难免会遇到差错，比如1变为0，0变为1，这种差错也称为&lt;strong&gt;比特差错&lt;/strong&gt;，于是需要通过编码方式对传输的比特实现差错控制，减少或避免误差。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;检错编码--检验传输的比特是否出错&#34;&gt;检错编码 =&amp;gt; 检验传输的比特是否出错&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;奇偶校验法&lt;/li&gt;
&lt;li&gt;循环冗余码（CRC：Cycle Redundancy Code）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;纠错编码--对出错的比特进行纠错--海明校验&#34;&gt;纠错编码 =&amp;gt; 对出错的比特进行纠错 =&amp;gt; 海明校验&lt;/h4&gt;
&lt;h3 id=&#34;流量控制&#34;&gt;流量控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为了防止发送方的速度过于快而导致接受方来不及接收从而造成的丢帧现象出现，需要对发送方的发送数据速率作一定的限制，而流量控制的常见方法是&lt;strong&gt;通过接收方来控制发送方的速率（由接收方感知，如果速率过快，则返回特定的信息）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见的两种流量控制方法&#34;&gt;常见的两种流量控制方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;停止-等待协议 ： 发送方发送一帧后，必须等待这一帧的回复才能继续发送下一帧。&lt;/li&gt;
&lt;li&gt;滑动窗口协议：发送方维持一组能够发送帧的集合，称为发送窗口，同理接收方也维持一组&lt;strong&gt;预接收帧的集合&lt;/strong&gt;，称为接受窗口。发送窗口外的帧不会发送，接收窗口外的帧不会接收。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;可靠传输机制&#34;&gt;可靠传输机制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可靠传输同时使用&lt;strong&gt;确认和超时传输&lt;/strong&gt;这两种机制来完成。
&lt;ol&gt;
&lt;li&gt;确认是指发送方发送帧后，为了确保该帧顺利到达接收方且没有出错，应该要收到对应的帧回复。&lt;/li&gt;
&lt;li&gt;超时传输指发送方发送帧后，会启动一个定时器，如果超过一定时间还没有收到回复帧，则认为帧丢失，需要重传。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;自动重传请求arqauto-repeat-request&#34;&gt;自动重传请求（ARQ：Auto Repeat reQuest）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;接收方通过请求发送方&lt;strong&gt;重传&lt;/strong&gt;出错的帧来恢复出错的帧。它是处理信道所带来差错的办法之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;arq分类&#34;&gt;ARQ分类&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;停止-等待ARQ&lt;/li&gt;
&lt;li&gt;后退N帧ARQ（Go-Back-N：GBN）&lt;/li&gt;
&lt;li&gt;选择性重传（Selective Repeat：SR） =&amp;gt; 接收方需具备缓存器，缓存出错帧之后已经到达接收方的帧。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;介质访问控制medium-access-control-mac&#34;&gt;介质访问控制（Medium Access Control： MAC）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为使用介质的每个设备与使用同一个介质的其它设备的通信隔离开来，简而言之，就是要保证各个通信设备在使用同一介质时互不干扰，这就是介质访问控制的作用。&lt;/li&gt;
&lt;li&gt;常见的介质访问控制分为&lt;strong&gt;信道划分MAC（静态划分），随机访问MAC（动态分配），轮询访问MAC（动态分配）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;信道划分介质访问控制&#34;&gt;信道划分介质访问控制&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;顾名思义，按照某种标准，将信道划分为多个部分以供给多个通信设备使用，由于划分是固定的，所以也是静态划分信道的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;频分多路复用（FDM）&lt;/li&gt;
&lt;li&gt;时分多路复用（TDM）&lt;/li&gt;
&lt;li&gt;波分多路复用（WDM）&lt;/li&gt;
&lt;li&gt;码分多路复用（CDM） =&amp;gt; 也叫做码分多址（CDMA：Code Division Multiple Access）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;随机访问介质访问控制&#34;&gt;随机访问介质访问控制&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ALOHA协议 =&amp;gt; 不检测，直接传，如果一段时间没收到确认，则重传。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统-2</title>
      <link>https://runtus.top/posts/0909-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 09 Sep 2021 15:19:46 +0000</pubDate>
      
      <guid>https://runtus.top/posts/0909-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本章主要总结操作系统中的内存管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;随着技术的发展，内存的容量再不断增大，但是也不能把所有用户数据和程序一起装入内存，因此&lt;strong&gt;操作系统&lt;/strong&gt;需要对内存空间进行合理的划分和有效的动态分配，从而提高系统的资源利用率。&lt;strong&gt;对内存的合理划分以及有效的动态划分&lt;/strong&gt;就是内存管理的概念。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;程序执行过程&#34;&gt;程序执行过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每段程序执行前大致需要经过三个过程：编译 -&amp;gt; 链接 -&amp;gt; 装入
&lt;ol&gt;
&lt;li&gt;编译：将源代码通过编译器编译为一个个目标模块。&lt;/li&gt;
&lt;li&gt;链接：将每个目标模块和&lt;strong&gt;所需库函数&lt;/strong&gt;链接起来，形成一个完整的装入模块。
&lt;ol&gt;
&lt;li&gt;静态链接（装入前链接），即在装入内存之前把所有的模块和对应的库函数进行链接从而形成一个可执行程序，以后不会再拆开。&lt;/li&gt;
&lt;li&gt;装入时动态链接，即在装入内存时，一边装入一边链接。&lt;/li&gt;
&lt;li&gt;运行时动态链接，即在执行对应模块代码时，实时链接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;装入：将链接后形成的模块装入内存中。
&lt;ol&gt;
&lt;li&gt;绝对装入 =&amp;gt; 程序相对地址和实际装入的物理地址相同。&lt;/li&gt;
&lt;li&gt;可重定位装入 =&amp;gt; 程序相对地址加一个&lt;strong&gt;重定位地址&lt;/strong&gt;形成实际的物理地址。&lt;/li&gt;
&lt;li&gt;动态运行时装入 =&amp;gt; 在执行对应的模块时，才开始执行&lt;strong&gt;地址转换&lt;/strong&gt;，地址转换的偏移量则从&lt;strong&gt;重定位寄存器&lt;/strong&gt;中取出。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内存分配管理方式&#34;&gt;内存分配管理方式&lt;/h3&gt;
&lt;h4 id=&#34;连续分配方式用户程序被分配进一个连续的内存空间&#34;&gt;连续分配方式：用户程序被分配进一个连续的内存空间&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;单一连续分配方式:  整个内存中只运行一道用户程序。&lt;/li&gt;
&lt;li&gt;固定分区分配
&lt;ul&gt;
&lt;li&gt;内存被划分为若干个固定大小的区域。当有程序需要装入内存时，从&lt;strong&gt;分区说明表&lt;/strong&gt;上寻找合适的内存区域并分配给它。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态分区分配 =&amp;gt; 不预先对内存进行分区，而是等程序装入内存时动态分区。
&lt;ol&gt;
&lt;li&gt;首次适应算法&lt;/li&gt;
&lt;li&gt;最佳适应算法&lt;/li&gt;
&lt;li&gt;最坏适应算法&lt;/li&gt;
&lt;li&gt;邻近适应算法（首次适应算法的改进，即下一次分配内存是从上一次分配内存结束位置开始）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;区分内部碎片还是外部碎片的关键在于：内存分区是提前分好还是运行时实时分配的。&lt;/p&gt;
&lt;p&gt;对于前者，很容易理解每个内存分区就可以称之为“内”，所以就有了内部碎片的说话。&lt;/p&gt;
&lt;p&gt;对于后者，由于没有提前分区，所以自然没有“内”的概念，那么所有的内存都是“外”，所以此时产生的碎片也称为外部碎片。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>操作系统-1</title>
      <link>https://runtus.top/posts/0908-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 08 Sep 2021 11:02:13 +0000</pubDate>
      
      <guid>https://runtus.top/posts/0908-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在复试时，很少问及计算题，大多数都是的问题都是和概念直接相关，所以要深刻理解操作系统各个组成部分的概念。&lt;/p&gt;
&lt;p&gt;本篇主要归纳操作系统的基本概念以及进程相关概念和算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;操作系统基本概念&#34;&gt;操作系统基本概念&lt;/h2&gt;
&lt;p&gt;首先需要知道操作系统在整个计算机系统中的定位：&lt;/p&gt;
&lt;p&gt;​	计算机系统大致可以分为四个部分（自底向上）：计算机硬件 -&amp;gt; 操作系统 -&amp;gt; 应用程序软件 -&amp;gt; 用户。&lt;/p&gt;
&lt;p&gt;从上述结构可以轻易看到，操作系统管理着计算机的各个硬件，具体表现为对资源的合理调度，分配等，同时也为上层应用程序软件提供&lt;strong&gt;抽象出来&lt;/strong&gt;的硬件功能。&lt;/p&gt;
&lt;p&gt;综上所述，操作系统可以定义为&lt;strong&gt;控制和管理整个计算机的硬件和软件资源，并合理地组织，分配资源、调度工作，进而为用户和其它软件提供方便接口与环境的程序集合。&lt;/strong&gt; 提炼一下，操作系统就是一系列程序的集合，不过这些程序有着上述管理功能。&lt;/p&gt;
&lt;h3 id=&#34;特征四大特征&#34;&gt;特征（四大特征）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;并发 =&amp;gt; 注意并发和并行的区别。&lt;/li&gt;
&lt;li&gt;共享 （两种共享方式，也对应着后续会提到的资源共享形式）
&lt;ol&gt;
&lt;li&gt;互斥共享&lt;/li&gt;
&lt;li&gt;同时访问&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;虚拟 =&amp;gt; 用逻辑的对应物去映射实际的物理设备，让用户在使用时感觉是在真正使用物理设备。
&lt;ul&gt;
&lt;li&gt;经典例子: 请求分页系统，SPOOLing技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步 =&amp;gt; 进程以不可预知的速度向前执行（进程的异步性）
&lt;ul&gt;
&lt;li&gt;异步也是操作系统中需要进程控制的原因之一，因为要保证&lt;strong&gt;怎么个异步法，各个进程的最终结果都一样。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中，**并发和共享是其它特性的基础，**它们两也相互依存。&lt;/p&gt;
&lt;h3 id=&#34;管理的计算机资源包括硬件和软件分类&#34;&gt;管理的计算机资源（包括硬件和软件）分类&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;处理机管理 =&amp;gt; 进程的调度与分配&lt;/li&gt;
&lt;li&gt;存储器管理 =&amp;gt; 内存管理&lt;/li&gt;
&lt;li&gt;文件管理 =&amp;gt; 文件的存储形式：逻辑存储和物理存储&lt;/li&gt;
&lt;li&gt;I/O设备管理 =&amp;gt; 外存相关概念以及相关管理&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;运行环境&#34;&gt;运行环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU的状态分为两类：&lt;strong&gt;用户态（目态）&lt;strong&gt;和&lt;/strong&gt;核心态（管态）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用户的程序运行在目态，而操作系统的内核运行在管态。有一些特殊的&lt;strong&gt;特权指令&lt;/strong&gt;，只有在CPU处于管态时才能调用。
&lt;ul&gt;
&lt;li&gt;特权指令 -&amp;gt; 操作系统不允许用户直接调用的指令，比如I/O指令，置中断指令等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果说用户程序必须使用&lt;strong&gt;特权指令的功能&lt;/strong&gt;，则需要通过&lt;strong&gt;中断或异常&lt;/strong&gt;操作来达到目的，即发生中断或异常时，CPU状态会从用户态转向核心态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中断和异常&#34;&gt;中断和异常&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;操作系统的发展过程大体上就是一个想法设法不断提高资源利用率的过程，而提高资源利用率就需要在程序并未使用某种资源时，把它对那种资源释放，而这一行为就需要通过中断来实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://runtus.top/posts/packagejson%E6%95%B0%E6%8D%AE%E9%A1%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://runtus.top/posts/packagejson%E6%95%B0%E6%8D%AE%E9%A1%B9/</guid>
      <description>&lt;h2 id=&#34;npm发包相关的packagejson配置说明&#34;&gt;npm发包相关的packagejson配置说明&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;将自己的项目上传至npm上时，需要正确设置packagejson中的相关字段，否则会导致上传的项目无法正确在其他地方引用，甚至无法上传至npm官网。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1-name&#34;&gt;1. name&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;name是整个项目的名称，也是在npm仓库中的唯一索引，当别人下载自己上传的npm包时，其关键字索引便是项目名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yarn add axios &lt;span class=&#34;c1&#34;&gt;# axios 便是项目名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-version&#34;&gt;2. version&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;version是版本号，它是一个字符串，每次发版时都要更新该字段。
&lt;ul&gt;
&lt;li&gt;版本号的编写遵循语义化版本 2.0.0 规范，即**「主版本号. 次版本号. 修订号」**&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-main&#34;&gt;3. main&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指定加载的入口文件，node端和web端都可以使用，当外部使用&lt;strong&gt;require&lt;/strong&gt;来引入npm包时，main指定的文件将以&lt;code&gt;module.export&lt;/code&gt;的形式对外暴露。&lt;/li&gt;
&lt;li&gt;所以一般情况下，main文件都会指向commonjs规范的文件，如下所示。&lt;/li&gt;
&lt;li&gt;mjs文件代表commonjs规范的js文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dist/index.cjs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
  </channel>
</rss>
